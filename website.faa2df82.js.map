{"mappings":"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","sources":["src/index.js"],"names":["phrases","el","fx","counter","TextScrambler","$b350cd9db4549ae05bfb23b905ede80$var$_classCallCheck","this","chars","update","bind","newText","_this","oldText","innerText","length","Math","max","promise","Promise","resolve","queue","i","from","to","start","floor","random","end","push","cancelAnimationFrame","frameRequest","frame","output","complete","n","_this$queue$i","char","randomChar","concat","innerHTML","requestAnimationFrame","Nav","func","limit","lastFunc","lastRan","navHeight","document","querySelector","getBoundingClientRect","height","mainNavLinks","querySelectorAll","window","addEventListener","fromTop","scrollY","prevSectionEnd","hash","offsetTop","link","section","sectionEnd","offsetHeight","classList","add","remove","context","args","arguments","clearTimeout","setTimeout","Date","now","apply","next","setText","then","ContactForm","contactForm","span","createElement","appendChild","charWidth","width","_i","_lineviews","Array","lineview","addLineViewListeners","lineviewContent","contentEditable","cursorPos","offset","range","createRange","sel","getSelection","setStart","childNodes","collapse","removeAllRanges","addRange","focus","parentNode","style","setProperty","_this2","e","handleLineViewKeyDown","handleLineViewClick","handleLineViewFocusIn","handleLineViewFocusOut","newCursorOffset","stepDiv","currentCursorOffset","parseFloat","target","getPropertyValue","key","inputWidth","min","prevLineviewContent","preventDefault","previousSibling","contains","round","previousStepDiv","closest","prevStepLineviews","activateLineView","nextLineviewContent","nextSibling","createLineView","after","nextStep","display","offsetX","editableDiv","caretPos","rangeCount","getRangeAt","commonAncestorContainer","endOffset","selection","parentElement","tempEl","insertBefore","firstChild","tempRange","duplicate","moveToElementText","setEndPoint","text","getCaretPosition","getElementById"],"version":3,"file":"website.faa2df82.js.map","sourcesContent":["class TextScrambler {\n    constructor(el) {\n        this.el = el\n        this.chars = '!<>-_\\\\/[]{}â€”=+*^?#________'\n        this.update = this.update.bind(this)\n    }\n\n    setText(newText) {\n        const oldText = this.el.innerText\n        const length = Math.max(oldText.length, newText.length)\n        const promise = new Promise((resolve) => this.resolve = resolve)\n        this.queue = []\n        for (let i = 0; i < length; i++) {\n            const from = oldText[i] || ''\n            const to = newText[i] || ''\n            const start = Math.floor(Math.random() * 40)\n            const end = start + Math.floor(Math.random() * 40)\n            this.queue.push({ from, to, start, end })\n        }\n        cancelAnimationFrame(this.frameRequest)\n        this.frame = 0\n        this.update()\n        return promise\n    }\n\n    update() {\n      let output = ''\n      let complete = 0\n      for (let i = 0, n = this.queue.length; i < n; i++) {\n        let { from, to, start, end, char } = this.queue[i]\n        if (this.frame >= end) {\n            complete++\n            output += to\n        } else if (this.frame >= start) {\n            if (!char || Math.random() < 0.28) {\n                char = this.randomChar()\n                this.queue[i].char = char\n            }\n            output += `<span class=\"dud\">${char}</span>`\n        } else {\n            output += from\n        }\n      }\n      this.el.innerHTML = output\n      if (complete === this.queue.length) {\n            this.resolve()\n      } else {\n            this.frameRequest = requestAnimationFrame(this.update)\n            this.frame++\n      }\n    }\n\n    randomChar() {\n        return this.chars[Math.floor(Math.random() * this.chars.length)]\n    }\n}\n\nconst throttle = (func, limit) => {\n    let lastFunc;\n    let lastRan;\n    return function() {\n        const context = this;\n        const args = arguments;\n        if (!lastRan) {\n            func.apply(context, args);\n            lastRan = Date.now();\n        } else {\n            clearTimeout(lastFunc);\n            lastFunc = setTimeout(function() {\n                if ((Date.now() - lastRan) >= limit) {\n                    func.apply(context, args);\n                    lastRan = Date.now();\n                }\n            }, limit - (Date.now() - lastRan));\n        }\n    }\n}\n\nclass Nav {\n    constructor() {\n        const navHeight = document.querySelector(\".nav\").getBoundingClientRect().height;\n        const mainNavLinks = document.querySelectorAll(\".nav .sections a\");\n\n        window.addEventListener(\"scroll\", throttle(() => {\n\n                const fromTop = window.scrollY;\n\n                let prevSectionEnd = document.querySelector(mainNavLinks[0].hash).offsetTop - navHeight\n                for (let i = 0; i < mainNavLinks.length; i++) {\n                    const link = mainNavLinks[i];\n                    \n                    const section = document.querySelector(link.hash);\n                    const sectionEnd = section.offsetTop - navHeight + section.offsetHeight\n\n                    if (\n                        prevSectionEnd <= fromTop &&\n                        sectionEnd > fromTop\n                    ) {\n                        link.classList.add(\"active\");\n                    } else {\n                        link.classList.remove(\"active\");\n                    }\n\n                    prevSectionEnd = sectionEnd\n                }\n            }, 100));\n    }\n}\n\n(function() {\n    const phrases = [\n        \"I'm a Software Engineer.\",\n        \"I love solving problems \",\n        \"and learning new things!\",\n    ]\n\n    const el = document.querySelector('.text')\n    const fx = new TextScrambler(el)\n\n    let counter = 0\n    const next = () => {\n        fx.setText(phrases[counter]).then(() => {\n            setTimeout(next, 800)\n        })\n        counter = (counter + 1) % phrases.length\n    }\n    \n    next()\n\n    new Nav()\n})();\n\nclass ContactForm {\n    constructor(contactForm) {\n        this.contactForm = contactForm\n\n        // Figure out letter width\n        const span = document.createElement('span')\n        span.innerText = 'a'\n        contactForm.appendChild(span)\n\n        this.charWidth = span.getBoundingClientRect().width\n        span.remove()\n\n        // Attach listeners to lineviews\n        const lineviews = Array.from(contactForm.querySelectorAll('.input-lineview-content'))\n        for (const lineview of lineviews) {\n            this.addLineViewListeners(lineview)\n        }\n    }\n\n    createLineView() {\n        const lineview = document.createElement('div')\n        lineview.classList.add('input-lineview')\n\n        const lineviewContent = document.createElement('div')\n        lineviewContent.classList.add('input-lineview-content')\n        lineviewContent.classList.add('empty')\n        lineviewContent.contentEditable = true\n\n        this.addLineViewListeners(lineviewContent)\n\n        lineview.appendChild(lineviewContent)\n\n        return lineview\n    }\n\n    activateLineView(lineview, cursorPos) {\n        if (cursorPos > lineview.innerText.length) {\n            cursorPos = lineview.innerText.length\n        } else if (cursorPos < 0) {\n            cursorPos = 0\n        }\n\n        const offset = this.charWidth * (lineview.innerText.length - cursorPos)\n        \n        if (lineview.innerText.length > 0) {\n            const range = document.createRange();\n            const sel = window.getSelection();\n            range.setStart(lineview.childNodes[0], cursorPos);\n            range.collapse(true);\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n\n        lineview.focus()\n        lineview.parentNode.classList.add('active')\n\n        lineview.parentNode.style.setProperty('--cursor-offset', offset + \"px\")\n    }\n\n    addLineViewListeners(lineview) {\n        lineview.addEventListener('keydown', e => {this.handleLineViewKeyDown(e)})\n        lineview.addEventListener('click', e => {this.handleLineViewClick(e)})\n        lineview.addEventListener('focusin', e => {this.handleLineViewFocusIn(e)})\n        lineview.addEventListener('focusout', e => {this.handleLineViewFocusOut(e)})\n    }\n\n    handleLineViewKeyDown(e) {\n        const currentCursorOffset = parseFloat(e.target.parentNode.style.getPropertyValue('--cursor-offset')) || 0\n        let newCursorOffset, stepDiv, cursorPos\n\n        if (e.target.innerText.length == 0) {\n            e.target.classList.add('empty')\n        } else {\n            e.target.classList.remove('empty')\n        }\n\n        switch (e.key) {\n            case \"ArrowLeft\":\n                const inputWidth = e.target.getBoundingClientRect().width\n                newCursorOffset = Math.min(inputWidth, currentCursorOffset + this.charWidth)\n                e.target.parentNode.style.setProperty('--cursor-offset', newCursorOffset + 'px')\n                break\n\n            case \"ArrowRight\":\n                newCursorOffset = Math.max(0, currentCursorOffset - this.charWidth)\n                e.target.parentNode.style.setProperty('--cursor-offset', newCursorOffset + 'px')\n                break\n\n            case \"ArrowUp\":\n                e.preventDefault()\n                let prevLineviewContent\n\n                if (e.target.parentNode.previousSibling && e.target.parentNode.previousSibling.classList.contains('input-lineview')) {\n                    prevLineviewContent = e.target.parentNode.previousSibling.querySelector('.input-lineview-content')\n                    cursorPos = e.target.innerText.length - Math.round(currentCursorOffset / this.charWidth)\n                } else {\n                    stepDiv = e.target.closest(\".step\")\n                    const previousStepDiv = stepDiv.previousSibling\n                    const prevStepLineviews = Array.from(previousStepDiv.querySelectorAll('.input-lineview-content'))\n                    prevLineviewContent = prevStepLineviews[prevStepLineviews.length - 1]\n                    cursorPos = prevLineviewContent.innerText.length\n                }\n\n                this.activateLineView(prevLineviewContent, cursorPos)\n                break\n\n            case \"ArrowDown\":\n                e.preventDefault()\n                let nextLineviewContent\n\n                if (e.target.parentNode.nextSibling && e.target.parentNode.nextSibling.classList.contains('input-lineview')) {\n                    nextLineviewContent = e.target.parentNode.nextSibling.querySelector('.input-lineview-content')\n                    cursorPos = e.target.innerText.length - Math.round(currentCursorOffset / this.charWidth)\n                } else {\n                    stepDiv = e.target.closest(\".step\")\n                    const nextStepDiv = stepDiv.nextSibling\n                    nextLineviewContent = nextStepDiv.querySelector('.input-lineview-content')\n                    cursorPos = nextLineviewContent.innerText.length\n                }\n\n                this.activateLineView(nextLineviewContent, cursorPos)\n                break\n            \n            case \"Backspace\":\n                if (\n                    e.target.innerText.length == 0 && \n                    e.target.previousSibling && \n                    e.target.previousSibling.classList.contains('input-lineview')\n                ) {\n                    this.activateLineView(e.target.previousSibling)\n                    e.target.remove()\n                }\n\n                break\n\n            case \"Delete\":\n                // TODO: Handle\n                break\n\n            case \"Insert\":\n                // TODO: Handle\n                break\n\n            case \"Enter\":\n                e.preventDefault()\n\n                stepDiv = e.target.closest(\".step\")\n                if (stepDiv.classList.contains('message-step')) {\n                    // Add new line to message textarea\n                    const lineview = this.createLineView()\n\n                    e.target.parentNode.after(lineview)\n                    const lineviewContent = lineview.querySelector(`.input-lineview-content`)\n                    this.activateLineView(lineviewContent)\n                } else {\n                    // Go to next step\n                    const nextStep = stepDiv.nextSibling\n                    nextStep.style.display = 'block'\n\n                    const lineviewContent = nextStep.querySelector(`.input-lineview-content`)\n                    this.activateLineView(lineviewContent)\n                }\n\n                break\n        \n            default:\n                break\n        }\n    }\n\n    handleLineViewClick(e) {\n        const offset = e.offsetX\n\n        const newCursorOffset = (e.target.innerText.length - getCaretPosition(e.target)) * this.charWidth\n        e.target.parentNode.style.setProperty('--cursor-offset', newCursorOffset + 'px')\n\n        e.target.parentNode.classList.add('active')\n    }\n\n    handleLineViewFocusIn(e) {\n        if (e.target.innerText.length == 0) {\n            e.target.parentNode.classList.add('active')\n        }\n    }\n\n    handleLineViewFocusOut(e) {\n        e.target.parentNode.classList.remove('active')\n    }\n\n}\n\nfunction getCaretPosition(editableDiv) {\n    var caretPos = 0,\n      sel, range;\n    if (window.getSelection) {\n      sel = window.getSelection();\n      if (sel.rangeCount) {\n        range = sel.getRangeAt(0);\n        if (range.commonAncestorContainer.parentNode == editableDiv) {\n          caretPos = range.endOffset;\n        }\n      }\n    } else if (document.selection && document.selection.createRange) {\n      range = document.selection.createRange();\n      if (range.parentElement() == editableDiv) {\n        var tempEl = document.createElement(\"span\");\n        editableDiv.insertBefore(tempEl, editableDiv.firstChild);\n        var tempRange = range.duplicate();\n        tempRange.moveToElementText(tempEl);\n        tempRange.setEndPoint(\"EndToEnd\", range);\n        caretPos = tempRange.text.length;\n      }\n    }\n    return caretPos;\n}\n\n// Contact form\n(function() {\n    new ContactForm(document.getElementById('contact-form'))\n\n    let step = 1\n    \n    // let handlingKeyPresses = false\n    // const handleKeyPress = e => {\n    //     console.log(e)\n    //     const text = document.querySelector(`.step-${step} .input-text`)\n    //     text.textContent += e.key\n    // }\n\n    // contactForm.addEventListener('click', e => {\n    //     // console.log(\"CLICKED!\")\n    //     contactForm.querySelector(`.step-${step} .input-lineview`).focus()\n    //     // if (!handlingKeyPresses) {\n    //     //     document.addEventListener('keypress', handleKeyPress)\n    //     //     handlingKeyPresses = true\n    //     // }\n    // });\n\n    let disabled = false\n\n    // console.log(\"RUNNING!\")\n\n    // contactForm.addEventListener('submit', e => {\n    //     e.preventDefault()\n\n    //     if (disabled) {\n    //         return\n    //     }\n\n    //     disabled = true\n    //     contactForm.classList.add('disabled')\n\n    //     contactForm.querySelector('button[type=\"submit\"]').innerText = \"Sending...\"\n\n    //     fetch('/contact', {\n    //         method: 'POST',\n    //         body: JSON.stringify({\n    //             name: contactForm.querySelector('input[name=\"name\"]').value,\n    //             email: contactForm.querySelector('input[name=\"email\"]').value,\n    //             message: contactForm.querySelector('textarea[name=\"message\"]').value,\n    //         })\n    //     })\n    //     .then((response) => {\n    //         if (response.ok) {\n    //             contactForm.querySelector('button[type=\"submit\"]').innerText = \"Sent\"\n    //         } else {\n    //             disabled = false\n    //             contactForm.classList.remove('disabled')\n    //             contactForm.querySelector('button[type=\"submit\"]').innerText = \"Failed\"\n    //             setTimeout(() => {\n    //                 contactForm.querySelector('button[type=\"submit\"]').innerText = \"Send Message\"\n    //             }, 1000)\n    //         }\n    //     })\n    // })\n})();"]}